<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Στα περισσότερα μοντέλα η συνήθης τακτική είναι να γενικεύονται οι εγγραφές σε κλάσεις ισοδυναμίας μεγέθους τουλάχιστον k με τρόπο ώστε σε κάθε μία κλάση οι τιμές των ψευδό-αναγνωριστικών να είναι ίδιες και να υπάρχει πλήθος από διαφορετικές ευαίσθητες τιμές. Όταν ένας πίνακας έχει πολύ μεγάλες διαστάσεις, νομοτελειακά το πλήθος των ψευδό-αναγνωριστικών θα είναι εξίσου μεγάλο. Για να εφαρμοστεί το μοντέλο της k-ανωνυμίας σε μεγάλο πίνακα θα πρέπει αναγκαστικά να διαγραφούν δεδομένα, γεγονός που υποβαθμίζει την χρησιμότητα και ποιότητα των πληροφοριών.
Για να αντιμετωπιστεί το παραπάνω πρόβλημα οι καθηγητές Mohammed, Fung και Debbabi προτείνουν το μοντέλο LKC-ιδιωτικότητα για την ανωνυμοποίηση υψηλών διαστάσεων πίνακες. Το μοντέλο εκμεταλλεύεται τις περιορισμένες γνώσεις του αντιπάλου. Σε πραγματικές συνθήκες, οι επιθέσεις ιδιωτικότητας είναι δύσκολο να εφαρμοστούν γιατί απαιτούν από τον επιτιθέμενο να αποκτήσει όλες τις τιμές των ψευδό-αναγνωριστικών. Είναι λογικό επομένως να θεωρήσουμε πως ένας αντίπαλος έχει στην κατοχή του το πολύ L τιμές των ψευδό-αναγνωριστικών του θύματος.

Η γενική ιδέα της LKC-privacy είναι να εξασφαλίσει πως όλοι οι συνδυασμοί τιμών στα QIDj υποσύνολο των QID του πίνακα δεδομένων Τ, με μέγιστο μήκος L να είναι ίδια με τουλάχιστον Κ εγγραφές και η δυνατότητα αποκάλυψης μια ευαίσθητης τιμής με εγγραφή να είναι το πολύ ίση με C. Τα L, K, C είναι επομένως κατώφλια τα οποία καθορίζονται εξαρχής από τον κάτοχο δεδομένων. Η πιθανότητα  στο μοντέλο LKC-privacy να πετύχει η αποκάλυψη εγγραφής είναι το πολύ 1/K ενώ η αποκάλυψη χαρακτηριστικού γνωρίσματος το πολύ 1/C, με δεδομένο ότι οι προηγούμενες γνώσεις του αντιπάλου δεν ξεπερνούν τις L τιμές.

Για περισσότερες πληροφορίες:
Mohammed, N., et al. Anonymizing healthcare data: a case study on the blood transfusion service. in Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining. 2009. ACM</value>
  </data>
</root>